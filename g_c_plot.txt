# Calculate mean and max rank for each combination
plot_data = []
thresholds = [1e-10,1e-12,1e-13]
chosen_n_ctrl = 2  # Replace with your desired N_ctrl value
chosen_n_reserv = 2  # Replace with your desired N_reserv value

# Filter results for the chosen N_ctrl and N_reserv
subset = df_all[(df_all['N_ctrl'] == chosen_n_ctrl) & (df_all['N_reserv'] == chosen_n_reserv)]
print(subset)
for threshold in thresholds:
    column = f'ranks_threshold_{threshold}'
    for _, group in subset.groupby('Trotter_Step'):
        max_rank = group[column].apply(lambda x: max(x) if x else 0).max()
        mean_rank = group[column].apply(lambda x: sum(x) / len(x) if x else 0).mean()
        plot_data.append((threshold, group['Trotter_Step'].iloc[0], max_rank, mean_rank))
colors = ['red', 'green', 'blue']
# Create a plot
fig, ax = plt.subplots(figsize=(10, 6))
for i, threshold in enumerate(thresholds):
    threshold_data = [(t, max_r, mean_r) for thr, t, max_r, mean_r in plot_data if thr == threshold]
    trotter_steps = [x[0] for x in threshold_data]
    max_ranks = [x[1] for x in threshold_data]
    mean_ranks = [x[2] for x in threshold_data]

    ax.plot(trotter_steps, max_ranks, label=f'Max G_C (threshold={threshold})', linestyle='-.', linewidth=2,color=colors[i])
    ax.plot(trotter_steps, mean_ranks, label=f'Mean G_C (threshold={threshold})', linestyle='--', linewidth=2,color=colors[i])

# Customize plot
ax.set_xlabel('Trotter Step (T)', fontsize=12)
ax.set_ylabel('Rank (G_C)', fontsize=12)
ax.set_title('Comparison of Max and Mean G_C for Different Thresholds', fontsize=14)
ax.legend(fontsize=10)
ax.grid(True)
plt.show()


fig, ax = plt.subplots(figsize=(10, 6))

for i, threshold in enumerate(thresholds):
    threshold_data = [(t, max_r, mean_r) for thr, t, max_r, mean_r in plot_data if thr == threshold]
    trotter_steps = [x[0] for x in threshold_data]
    max_ranks = [x[1] for x in threshold_data]
    mean_ranks = [x[2] for x in threshold_data]

    ax.plot(
        trotter_steps, max_ranks, label=f'Max $D_C$ (threshold={threshold})',
        linestyle='-.', linewidth=1.5, marker='o', color=colors[i]
    )
    ax.plot(
        trotter_steps, mean_ranks, label=f'Mean $D_C$ (threshold={threshold})',
        linestyle='--', linewidth=1.5, marker='o', color=colors[i]
    )

# Customize plot with similar formatting to the example
ax.set_xlabel('$T$', fontsize=14, fontweight='bold')  # Trotter steps
ax.set_ylabel('$D_C$', fontsize=14, fontweight='bold')  # Effective dimension
ax.tick_params(axis='both', labelsize=12)
ax.legend(fontsize=10, loc='best', frameon=True)
ax.grid(True, linestyle='--', linewidth=0.5, alpha=0.7)

# Add a label to the top-left corner
ax.text(-0.1, 1.05, 'a', transform=ax.transAxes, fontsize=16, fontweight='bold', va='top', ha='right')

plt.tight_layout()
plt.show()


##############################################
# Define thresholds
thresholds = [1e-10, 1e-11, 1e-12, 1e-13]

# Initialize empty columns in the DataFrame for each threshold
for threshold in thresholds:
    df_all[f'ranks_threshold_{threshold}'] = df_all['all_qfim_eigvals'].apply(
        lambda eigval_list: [len([val for val in eigvals if val > threshold]) for eigvals in eigval_list]
    )

# Create results DataFrame for each threshold
results_list = []
for threshold in thresholds:
    # Group by Trotter_Step, N_reserv, and N_ctrl
    grouped = df_all.groupby(['Trotter_Step', 'N_reserv', 'N_ctrl'])

    # Compute max and mean rank for the current threshold
    results = grouped[f'ranks_threshold_{threshold}'].apply(
        lambda x: {
            f'max_rank_threshold_{threshold}': max([max(r) for r in x]),  # Max rank across all tests
            f'mean_rank_threshold_{threshold}': np.mean([rank for sublist in x for rank in sublist])  # Mean rank across all tests
        }
    ).apply(pd.Series).reset_index()

    results_list.append(results)

# Merge results for all thresholds into one DataFrame
results_combined = results_list[0]
for results in results_list[1:]:
    results_combined = pd.merge(results_combined, results, on=['Trotter_Step', 'N_reserv', 'N_ctrl'], how='outer')

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

# Define a threshold for eigenvalues
# threshold = 1e-10


df_all['ranks'] = df_all['all_qfim_eigvals'].apply(
    lambda eigval_list: [len([val for val in eigvals if val > threshold]) for eigvals in eigval_list]
)

# Group by Trotter_Step, N_reserv, and N_ctrl
grouped = df_all.groupby(['Trotter_Step', 'N_reserv', 'N_ctrl'])

# Compute max and mean rank for each group
results = grouped['ranks'].apply(
    lambda x: {
        'max_rank': max([max(r) for r in x]),  # Max rank across all tests
        'mean_rank': np.mean([rank for sublist in x for rank in sublist])  # Mean rank across all tests
    }
).apply(pd.Series).reset_index()

# Fix column names for clarity
results = results.rename(columns={0: 'value', 'level_3': 'metric'})

# Pivot the results for easier plotting
results = results.pivot(index=['Trotter_Step', 'N_reserv', 'N_ctrl'], columns='metric', values='value').reset_index()

# Plotting for specific N_ctrl and N_reserv
chosen_n_ctrl = 1  # Replace with your desired N_ctrl value
chosen_n_reserv = 1  # Replace with your desired N_reserv value

# Filter results for the chosen N_ctrl and N_reserv
subset = results[(results['N_ctrl'] == chosen_n_ctrl) & (results['N_reserv'] == chosen_n_reserv)]
print(subset)
# Plotting
plt.figure(figsize=(10, 6))
plt.plot(
    subset['Trotter_Step'], 
    subset['max_rank'], 
    label=f'Max G_C (N_ctrl={chosen_n_ctrl}, N_reserv={chosen_n_reserv})', 
    marker='o'
)
plt.plot(
    subset['Trotter_Step'], 
    subset['mean_rank'], 
    linestyle='--', 
    label=f'Mean G_C (N_ctrl={chosen_n_ctrl}, N_reserv={chosen_n_reserv})', 
    marker='x'
)

plt.xlabel('Trotter Step (T)', fontsize=14)
plt.ylabel('Rank (G_C)', fontsize=14)
plt.title(f'Comparison of Max and Mean G_C for $N_C={chosen_n_ctrl}, N_R={chosen_n_reserv}$', fontsize=16)
plt.legend(fontsize=12)
plt.grid(alpha=0.6)
plt.show()

# Initialize the plot
plt.figure(figsize=(10, 6))

# Loop through thresholds and compute ranks
for i, threshold in enumerate(thresholds):
    # Compute ranks for the current threshold
    df_all['ranks'] = df_all['all_qfim_eigvals'].apply(lambda eigval_list: 
        [len([val for val in eigvals if val > threshold]) for eigvals in eigval_list]
    )
    
    # Group by Trotter_Step, N_reserv, and N_ctrl
    grouped = df_all.groupby(['Trotter_Step', 'N_reserv', 'N_ctrl'])

    # Compute max and mean rank for each group
    results = grouped['ranks'].apply(lambda x: {
        'max_rank': max([max(r) for r in x]),  # Maximum rank across all tests
        'mean_rank': np.mean([np.mean(r) for r in x])  # Average rank across all tests
    }).apply(pd.Series).reset_index()
    # Compute max and mean rank for each group
    results = grouped['ranks'].apply(
        lambda x: {
            'max_rank': max([max(r) for r in x]),  # Max rank across all tests
            'mean_rank': np.mean([rank for sublist in x for rank in sublist])  # Mean rank across all tests
        }
    ).apply(pd.Series).reset_index()

    # Fix column names (if necessary)
    results = results.rename(columns={0: 'value', 'level_3': 'metric'})

    # Pivot to flatten the structure
    results = results.pivot(index=['Trotter_Step', 'N_reserv', 'N_ctrl'], columns='metric', values='value').reset_index()

    # Filter results for N_ctrl=1 and N_reserv=1
    subset = results[(results['N_ctrl'] == 1) & (results['N_reserv'] == 1)]

    # Plot max and mean G_C
    plt.plot(subset['Trotter_Step'], subset['max_rank'], label=f'Max G_C (threshold={threshold})', color=colors[i])
    plt.plot(subset['Trotter_Step'], subset['mean_rank'], linestyle='--', label=f'Mean G_C (threshold={threshold})', color=colors[i])

# Add labels, legend, and title
plt.xlabel('Trotter Step (T)', fontsize=14)
plt.ylabel('Rank (G_C)', fontsize=14)
plt.title('Comparison of Max and Mean G_C for Different Thresholds', fontsize=16)
plt.legend(fontsize=12)
plt.grid()

# Show the plot
plt.show()
